{"version":3,"sources":["models/SleepEvent.ts","components/Emoji.tsx","components/ActionBar.tsx","components/Log.tsx","logic/sleepEventReducer.ts","models/SleepEventDatabase.ts","logic/actions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SleepState","Emoji","label","symbol","role","aria-label","aria-hidden","ActionBar","addAwake","addAsleep","addAwakeAndAsleep","className","onClick","sleepStateToEmoji","sleepState","Awake","Asleep","Error","SleepEvent","time","state","this","Log","sleepEventsState","dateFormatOptions","timeZone","hour12","hour","minute","formatEvent","key","event","modifier","sleepEvent","toLocaleTimeString","cssClass","length","formatDualEvent","nextEvent","nextSymbol","nextTime","nextTimeString","logEntries","eventsCount","sleepEvents","i","push","timeDifference","getTime","Math","trunc","sleepEventReducer","action","type","undefined","payload","events","concat","db","version","stores","table","Dexie","dispatch","eventToAdd","Date","add","then","id","awakeEvent","asleepEvent","bulkAdd","App","React","useReducer","dispatchSleepEvents","useEffect","toArray","actions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2bbf293b.chunk.js","sourcesContent":["export enum SleepState {\n    Awake,\n    Asleep,\n}\n\nexport function sleepStateToEmoji(sleepState:SleepState) {\n    switch(sleepState) {\n        case SleepState.Awake:\n            return \"ðŸ‘€\";\n        case SleepState.Asleep: \n            return \"ðŸ˜´\";\n        default:\n            throw new Error('Unknown SleepState: ' + sleepState);\n    }\n}\n\nexport default class SleepEvent {\n    state: SleepState;\n    time: Date;\n    constructor(time: Date, state: SleepState) {\n        this.time = time;\n        this.state = state;\n    }\n} ","import * as React from 'react';\n\ntype EmojiProps = {\n  label: string,\n  symbol: string\n}\n\nconst Emoji: React.FC<EmojiProps> = ({label, symbol}) => (\n  <span role=\"img\"\n    aria-label={label ? label : \"\"}\n    aria-hidden={label ? \"false\" : \"true\"}\n  >\n    {symbol}\n  </span>\n);\n\nexport default Emoji;","import * as React from 'react';\nimport './ActionBar.css';\nimport Emoji from './Emoji';\n\nconst ActionBar: React.FC<{addAwake: () => void, addAsleep: () => void, \n  addAwakeAndAsleep: () => void}> = ({addAwake, addAsleep, addAwakeAndAsleep}) => {\n  return (\n    <div className=\"action-bar\">\n      <div className=\"action-bar__button\" onClick={addAsleep}>\n        <Emoji symbol=\"ðŸ˜´\" label=\"fell asleep\"/>\n        </div>\n      <div className=\"action-bar__button\" onClick={addAwakeAndAsleep}>\n        <Emoji symbol=\"ðŸ‘€ðŸ˜´\" label=\"woke up and fell asleep\"/>\n      </div>\n      <div className=\"action-bar__button\" onClick={addAwake}>\n        <Emoji symbol=\"ðŸ‘€\" label=\"woke up\"/>\n      </div>\n    </div>\n  );\n};\n\nexport default ActionBar;","import * as React from 'react';\nimport * as sleepEventReducer from '../logic/sleepEventReducer';\nimport SleepEvent, * as sleepEvent from './../models/SleepEvent';\nimport './Log.css';\n\nconst Log: React.FC<{sleepEventsState: sleepEventReducer.SleepEventsStateType}> = ({sleepEventsState}) => {\n  const dateFormatOptions = {\n    timeZone:\"Europe/Helsinki\",\n    hour12 : false,\n    hour:  \"2-digit\",\n    minute: \"2-digit\"\n  };\n  const className = \"log__entry\";\n\n  function formatEvent(key: number, event: SleepEvent, modifier: string = \"\"): JSX.Element {    \n    const symbol = sleepEvent.sleepStateToEmoji(event.state);\n    const time = event.time.toLocaleTimeString(\"en-US\", dateFormatOptions);\n    const cssClass = modifier.length > 0 ? `${className}--${modifier}` : className;\n    return  <div className={cssClass} key={key}>{time} {symbol}</div>;\n  }\n\n  function formatDualEvent(key: number, event: SleepEvent, nextEvent: SleepEvent,): JSX.Element {    \n    const symbol = sleepEvent.sleepStateToEmoji(event.state);\n    const time = event.time.toLocaleTimeString(\"en-US\", dateFormatOptions);\n    const nextSymbol = sleepEvent.sleepStateToEmoji(nextEvent.state);\n    const nextTime = nextEvent.time.toLocaleTimeString(\"en-US\", dateFormatOptions);\n    const nextTimeString = time === nextTime ? \"\" : ` ${nextTime}`;\n    return <div className={className} key={key}>{time} {symbol}{nextTimeString} {nextSymbol}</div>;\n  }\n\n  const logEntries = [];\n  const eventsCount = sleepEventsState.sleepEvents.length;\n  for (let i = 0; i < eventsCount; i++) {\n    const event = sleepEventsState.sleepEvents[i];   \n\n    if (event.state === sleepEvent.SleepState.Asleep) {\n      logEntries.push(formatEvent(i, event));\n    }\n    else {\n      if (i+1 < eventsCount) {\n        const nextEvent = sleepEventsState.sleepEvents[i+1];\n        let timeDifference = nextEvent.time.getTime()-event.time.getTime();\n        let differenceInMinutes = Math.trunc(timeDifference/60000);\n        if (differenceInMinutes < 180) {         \n          logEntries.push(formatDualEvent(i, event, nextEvent));\n          i++;\n        }\n        else {\n          logEntries.push(formatEvent(i, event, \"separator\"));\n        }\n      }\n      else {\n        logEntries.push(formatEvent(i, event));\n      }\n    }\n  }\n\n  return (\n    <div className=\"log\">\n      {logEntries}\n    </div>\n  );\n};\n\nexport default Log;","import SleepEvent from './../models/SleepEvent';\n\nexport type SleepEventsStateType = {\n  sleepEvents: SleepEvent[]\n}\n\nexport type SleepActionType = {\n  type: 'init' | 'add',\n  payload?: SleepEvent[]\n}\n\nexport default function sleepEventReducer(state: SleepEventsStateType, action: SleepActionType) : SleepEventsStateType {\n  switch (action.type) {\n    case 'init':\n      const events = action.payload === undefined ? [] : action.payload;\n      return { sleepEvents: events};\n    case 'add': {\n      const events = action.payload === undefined ? [] : action.payload;\n      return { sleepEvents: state.sleepEvents.concat(events)};\n    }\n    default:\n      return state;\n  }\n}\n  ","import Dexie from 'dexie';\n\nexport default class SleepEventDatabase extends Dexie {\n    sleepEvents: Dexie.Table<IStoredSleepEvent, number>;\n\n    constructor () {\n        super(\"SleepEventDatabase\");\n        this.version(1).stores({\n            sleepEvents: '++id, state, time',\n        });\n        this.sleepEvents = this.table(\"sleepEvents\");\n    }\n}\n\ninterface IStoredSleepEvent {\n    id?: number,\n    state: number;\n    time: Date;\n}\n\nexport const db = new SleepEventDatabase();","import {db} from './../models/SleepEventDatabase';\nimport SleepEvent, { SleepState } from './../models/SleepEvent';\nimport * as sleepEventReducer from '../logic/sleepEventReducer';\n\nexport function initSleepEvents(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\n  db.sleepEvents.toArray().then(events => {\n    dispatch({ type: 'init', payload: events });\n  });\n}\n\nexport function addAwake(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\n  return () => {\n    const eventToAdd = new SleepEvent(new Date(), SleepState.Awake);\n    db.sleepEvents\n      .add(eventToAdd)\n      .then((id) => {\n        dispatch({\n          type: 'add',\n          payload: [eventToAdd],\n        });\n      });\n  }\n}\n\nexport function addAsleep(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\n  return () => {\n    const eventToAdd = new SleepEvent(new Date(), SleepState.Asleep);\n    db.sleepEvents\n      .add(eventToAdd)\n      .then((id) => {\n        dispatch({\n          type: 'add',\n          payload: [eventToAdd],\n        });\n      });\n  }\n}\n\nexport function addAwakeAndAsleep(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\n  return () => {\n    const awakeEvent = new SleepEvent(new Date(), SleepState.Awake);\n    const asleepEvent = new SleepEvent(new Date(), SleepState.Asleep);\n    db.sleepEvents\n      .bulkAdd([awakeEvent,asleepEvent])\n      .then((id) => {\n        dispatch({\n          type: 'add',\n          payload: [awakeEvent,asleepEvent],\n        });\n      });\n  }\n}","import React from 'react';\nimport './App.css';\nimport ActionBar from './components/ActionBar';\nimport Log from './components/Log';\nimport sleepEventReducer from './logic/sleepEventReducer';\nimport  * as actions from './logic/actions';\n\nconst App: React.FC = () => {\n  const [sleepEvents, dispatchSleepEvents] = React.useReducer(sleepEventReducer, { sleepEvents: [] });\n\n  React.useEffect(() => {\n    actions.initSleepEvents(dispatchSleepEvents);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Log sleepEventsState={sleepEvents}/>\n      <ActionBar addAwake={actions.addAwake(dispatchSleepEvents)} \n        addAwakeAndAsleep={actions.addAwakeAndAsleep(dispatchSleepEvents)} \n        addAsleep={actions.addAsleep(dispatchSleepEvents)}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}