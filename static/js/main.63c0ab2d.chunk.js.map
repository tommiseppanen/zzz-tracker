{"version":3,"sources":["models/SleepEvent.ts","components/Emoji.tsx","components/ActionBar.tsx","components/Log.tsx","logic/sleepEventReducer.ts","models/SleepEventDatabase.ts","logic/actions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SleepState","Emoji","label","symbol","role","aria-label","aria-hidden","ActionBar","addAwake","addAsleep","addAwakeAndAsleep","className","onClick","sleepStateToEmoji","sleepState","Awake","Asleep","Error","SleepEvent","time","state","this","Log","sleepEventsState","dateFormatOptions","timeZone","hour12","hour","minute","formatEvent","key","event","modifier","sleepEvent","toLocaleTimeString","cssClass","length","formatDualEvent","nextEvent","nextSymbol","nextTime","nextTimeString","logEntries","eventsCount","sleepEvents","i","unshift","timeDifference","getTime","Math","trunc","sleepEventReducer","action","type","undefined","payload","events","concat","db","version","stores","table","Dexie","dispatch","eventToAdd","Date","add","then","id","awakeEvent","asleepEvent","bulkAdd","App","React","useReducer","dispatchSleepEvents","useEffect","toArray","actions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.63c0ab2d.chunk.js","sourcesContent":["export enum SleepState {\r\n    Awake,\r\n    Asleep,\r\n}\r\n\r\nexport function sleepStateToEmoji(sleepState:SleepState) {\r\n    switch(sleepState) {\r\n        case SleepState.Awake:\r\n            return \"ðŸ‘€\";\r\n        case SleepState.Asleep: \r\n            return \"ðŸ˜´\";\r\n        default:\r\n            throw new Error('Unknown SleepState: ' + sleepState);\r\n    }\r\n}\r\n\r\nexport default class SleepEvent {\r\n    state: SleepState;\r\n    time: Date;\r\n    constructor(time: Date, state: SleepState) {\r\n        this.time = time;\r\n        this.state = state;\r\n    }\r\n} ","import * as React from 'react';\r\n\r\ntype EmojiProps = {\r\n  label: string,\r\n  symbol: string\r\n}\r\n\r\nconst Emoji: React.FC<EmojiProps> = ({label, symbol}) => (\r\n  <span role=\"img\"\r\n    aria-label={label ? label : \"\"}\r\n    aria-hidden={label ? \"false\" : \"true\"}\r\n  >\r\n    {symbol}\r\n  </span>\r\n);\r\n\r\nexport default Emoji;","import * as React from 'react';\r\nimport './ActionBar.css';\r\nimport Emoji from './Emoji';\r\n\r\nconst ActionBar: React.FC<{addAwake: () => void, addAsleep: () => void, \r\n  addAwakeAndAsleep: () => void}> = ({addAwake, addAsleep, addAwakeAndAsleep}) => {\r\n  return (\r\n    <div className=\"action-bar\">\r\n      <div className=\"action-bar__button\" onClick={addAsleep}>\r\n        <Emoji symbol=\"ðŸ˜´\" label=\"fell asleep\"/>\r\n        </div>\r\n      <div className=\"action-bar__button\" onClick={addAwakeAndAsleep}>\r\n        <Emoji symbol=\"ðŸ‘€ðŸ˜´\" label=\"woke up and fell asleep\"/>\r\n      </div>\r\n      <div className=\"action-bar__button\" onClick={addAwake}>\r\n        <Emoji symbol=\"ðŸ‘€\" label=\"woke up\"/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionBar;","import * as React from 'react';\r\nimport * as sleepEventReducer from '../logic/sleepEventReducer';\r\nimport SleepEvent, * as sleepEvent from './../models/SleepEvent';\r\nimport './Log.css';\r\n\r\nconst Log: React.FC<{sleepEventsState: sleepEventReducer.SleepEventsStateType}> = ({sleepEventsState}) => {\r\n  const dateFormatOptions = {\r\n    timeZone:\"Europe/Helsinki\",\r\n    hour12 : false,\r\n    hour:  \"2-digit\",\r\n    minute: \"2-digit\"\r\n  };\r\n  const className = \"log__entry\";\r\n  const locale = \"en-GB\";\r\n  const dualEventLimitMinutes = 180;\r\n\r\n  function formatEvent(key: number, event: SleepEvent, modifier: string = \"\"): JSX.Element {    \r\n    const symbol = sleepEvent.sleepStateToEmoji(event.state);\r\n    const time = event.time.toLocaleTimeString(locale, dateFormatOptions);\r\n    const cssClass = modifier.length > 0 ? `${className}--${modifier}` : className;\r\n    return  <div className={cssClass} key={key}>{time} {symbol}</div>;\r\n  }\r\n\r\n  function formatDualEvent(key: number, event: SleepEvent, nextEvent: SleepEvent,): JSX.Element {    \r\n    const symbol = sleepEvent.sleepStateToEmoji(event.state);\r\n    const time = event.time.toLocaleTimeString(locale, dateFormatOptions);\r\n    const nextSymbol = sleepEvent.sleepStateToEmoji(nextEvent.state);\r\n    const nextTime = nextEvent.time.toLocaleTimeString(locale, dateFormatOptions);\r\n    const nextTimeString = time === nextTime ? \"\" : ` ${nextTime}`;\r\n    return <div className={className} key={key}>{time} {symbol}{nextTimeString} {nextSymbol}</div>;\r\n  }\r\n\r\n  const logEntries = [];\r\n  const eventsCount = sleepEventsState.sleepEvents.length;\r\n  for (let i = 0; i < eventsCount; i++) {\r\n    const event = sleepEventsState.sleepEvents[i];   \r\n\r\n    //Group events\r\n    if (event.state === sleepEvent.SleepState.Asleep) {\r\n      logEntries.unshift(formatEvent(i, event, \"separator\"));\r\n    }\r\n    else {\r\n      if (i+1 < eventsCount) {\r\n        const nextEvent = sleepEventsState.sleepEvents[i+1];\r\n        let timeDifference = nextEvent.time.getTime()-event.time.getTime();\r\n        let differenceInMinutes = Math.trunc(timeDifference/60000);\r\n        if (differenceInMinutes < dualEventLimitMinutes) {         \r\n          logEntries.unshift(formatDualEvent(i, event, nextEvent));\r\n          i++;\r\n          continue;\r\n        }\r\n      }\r\n      logEntries.unshift(formatEvent(i, event));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"log\">\r\n      {logEntries}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Log;","import SleepEvent from './../models/SleepEvent';\r\n\r\nexport type SleepEventsStateType = {\r\n  sleepEvents: SleepEvent[]\r\n}\r\n\r\nexport type SleepActionType = {\r\n  type: 'init' | 'add',\r\n  payload?: SleepEvent[]\r\n}\r\n\r\nexport default function sleepEventReducer(state: SleepEventsStateType, action: SleepActionType) : SleepEventsStateType {\r\n  switch (action.type) {\r\n    case 'init':\r\n      const events = action.payload === undefined ? [] : action.payload;\r\n      return { sleepEvents: events};\r\n    case 'add': {\r\n      const events = action.payload === undefined ? [] : action.payload;\r\n      return { sleepEvents: state.sleepEvents.concat(events)};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n  ","import Dexie from 'dexie';\r\n\r\nexport default class SleepEventDatabase extends Dexie {\r\n    sleepEvents: Dexie.Table<IStoredSleepEvent, number>;\r\n\r\n    constructor () {\r\n        super(\"SleepEventDatabase\");\r\n        this.version(1).stores({\r\n            sleepEvents: '++id, state, time',\r\n        });\r\n        this.sleepEvents = this.table(\"sleepEvents\");\r\n    }\r\n}\r\n\r\ninterface IStoredSleepEvent {\r\n    id?: number,\r\n    state: number;\r\n    time: Date;\r\n}\r\n\r\nexport const db = new SleepEventDatabase();","import {db} from './../models/SleepEventDatabase';\r\nimport SleepEvent, { SleepState } from './../models/SleepEvent';\r\nimport * as sleepEventReducer from '../logic/sleepEventReducer';\r\n\r\nexport function initSleepEvents(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\r\n  db.sleepEvents.toArray().then(events => {\r\n    dispatch({ type: 'init', payload: events });\r\n  });\r\n}\r\n\r\nexport function addAwake(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\r\n  return () => {\r\n    const eventToAdd = new SleepEvent(new Date(), SleepState.Awake);\r\n    db.sleepEvents\r\n      .add(eventToAdd)\r\n      .then((id) => {\r\n        dispatch({\r\n          type: 'add',\r\n          payload: [eventToAdd],\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nexport function addAsleep(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\r\n  return () => {\r\n    const eventToAdd = new SleepEvent(new Date(), SleepState.Asleep);\r\n    db.sleepEvents\r\n      .add(eventToAdd)\r\n      .then((id) => {\r\n        dispatch({\r\n          type: 'add',\r\n          payload: [eventToAdd],\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nexport function addAwakeAndAsleep(dispatch: React.Dispatch<sleepEventReducer.SleepActionType>) {\r\n  return () => {\r\n    const awakeEvent = new SleepEvent(new Date(), SleepState.Awake);\r\n    const asleepEvent = new SleepEvent(new Date(), SleepState.Asleep);\r\n    db.sleepEvents\r\n      .bulkAdd([awakeEvent,asleepEvent])\r\n      .then((id) => {\r\n        dispatch({\r\n          type: 'add',\r\n          payload: [awakeEvent,asleepEvent],\r\n        });\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport ActionBar from './components/ActionBar';\r\nimport Log from './components/Log';\r\nimport sleepEventReducer from './logic/sleepEventReducer';\r\nimport  * as actions from './logic/actions';\r\n\r\nconst App: React.FC = () => {\r\n  const [sleepEvents, dispatchSleepEvents] = React.useReducer(sleepEventReducer, { sleepEvents: [] });\r\n\r\n  React.useEffect(() => {\r\n    actions.initSleepEvents(dispatchSleepEvents);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Log sleepEventsState={sleepEvents}/>\r\n      <ActionBar addAwake={actions.addAwake(dispatchSleepEvents)} \r\n        addAwakeAndAsleep={actions.addAwakeAndAsleep(dispatchSleepEvents)} \r\n        addAsleep={actions.addAsleep(dispatchSleepEvents)}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}